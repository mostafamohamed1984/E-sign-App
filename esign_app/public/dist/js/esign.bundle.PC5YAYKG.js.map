{
  "version": 3,
  "sources": ["../../../../../apps/esign_app/esign_app/public/js/timeline_button.js", "../../../../../apps/esign_app/esign_app/public/js/esign.bundle.js"],
  "sourcesContent": ["// Timeline button for Frappe\n$(document).on(\"app_ready\", function () {\n  $.each(frappe.boot.user.can_read, function (i, doctype) {\n    let buttonAdded = false;\n\n    frappe.ui.form.on(doctype, {\n      refresh: function (frm) {\n   \n        if (!frm.is_new()) {\n          if (frm.footer?.frm?.timeline && !buttonAdded) {\n            let send_esign = async () => {\n\n              console.log(\"------------------------------------------>\")\n         \n                let userEmailList = [];\n                try {\n                  const res = await frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                      doctype: \"User\",\n                      filters: { enabled: 1 },\n                      fields: [\"email\"],\n                      limit_page_length: 1000,\n                    },\n                  });\n        \n                  userEmailList = res.message.map((user) => user.email);\n                } catch (e) {\n                  console.error(\"Failed to fetch user emails:\", e);\n                }\n              \n                console.log(\"===\",userEmailList)\n\n\n              let user = frappe.session.user;\n              let userDetails = await frappe.db.get_value(\"User\", user, [\"full_name\", \"email\"]);\n              let doctype = frm.doctype;\n              let docname = frm.docname;\n              let fullName = userDetails?.message?.full_name || \"Unknown User\";\n              let email = userDetails?.message?.email || \"No Email\";\n\n              let templates = [];\n              try {\n                let response = await fetch(`/api/method/esign_app.api.get_templetes?user_mail=${email}`);\n                let data = await response.json();\n                if (data.message?.status === 200 && Array.isArray(data.message.data)) {\n                  templates = data.message.data.map((temp) => ({\n                    label: temp.templete_title.trim(),\n                    value: temp.name.trim(),\n                  }));\n                }\n              } catch (error) {\n                console.error(\"Error fetching templates:\", error);\n              }\n\n              let templateOptions = {};\n              if (templates.length) {\n                templateOptions = Object.fromEntries(templates.map((t) => [t.label, t.value]));\n              }\n\n              let dialog = new frappe.ui.Dialog({\n                title: \"Send to eSign\",\n                fields: [\n                  {\n                    fieldname: \"user_details\",\n                    label: \"User Details\",\n                    fieldtype: \"HTML\",\n                    options: `<div style=\"font-family: 'Arial'; font-size: 16px; line-height: 1.6; color: #333; background: #f9f9f9; padding: 15px 20px; border: 1px solid #ddd; border-radius: 10px; max-width: 400px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n                                <p style=\"margin: 0 0 5px; font-weight: 600; font-size: 18px; color: #222;\">${fullName}</p>\n                                <p style=\"margin: 0; font-size: 14px; color: #555;\">${email}</p>\n                              </div><br/>`\n                  },\n                  {\n                    fieldname: \"custom_docname\",\n                    label: \"Enter Name\",\n                    default: docname,\n                    fieldtype: \"Data\",\n                    reqd: 1,\n                  },\n                  {\n                    fieldname: \"letterhead\",\n                    label: \"Select Letter Head\",\n                    fieldtype: \"Link\",\n                    options: \"Letter Head\",\n                  },\n                  {\n                    fieldname: \"print_format\",\n                    label: \"Select Print Format\",\n                    fieldtype: \"Link\",\n                    options: \"Print Format\",\n                    get_query: function () {\n                      return {\n                        filters: { doc_type: cur_frm.doc.doctype },\n                      };\n                    },\n                  },\n                  {\n                    fieldname: \"template_select\",\n                    label: \"Select Template\",\n                    fieldtype: \"Link\",\n                    options: \"TempleteList\",\n                    get_query() {\n                      return {\n                        filters: {\n                          name: [\"in\", Object.values(templateOptions)],\n                        },\n                      };\n                    },\n                  },\n                  {\n                    fieldname: \"assignments\",\n                    label: \"Component Assignments\",\n                    fieldtype: \"Table\",\n                    cannot_add_rows: true,\n                    in_list_view: 0,\n                    depends_on: \"eval:doc.template_select\",\n                    fields: [\n                      {\n                        fieldname: \"component\",\n                        label: \"Component\",\n                        fieldtype: \"Data\",\n                        read_only: 1,\n                        in_list_view: 1,\n                      },\n                      {\n                        fieldname: \"email\",\n                        label: \"Assign To\",\n                        fieldtype: \"Autocomplete\",\n                        options: userEmailList,\n                        in_list_view: 1,\n                      },\n                    ],\n                  },\n                ],\n                secondary_action_label: \"Assign & Send\",\n                secondary_action: async () => {\n                  frappe.show_alert({ message: \"Processing...\", indicator: \"orange\" });\n                  try {\n                    const templateSelected = dialog.get_value(\"template_select\");\n                    const printFormat = dialog.get_value(\"print_format\") || \"Standard\";\n                    const letterhead = dialog.get_value(\"letterhead\") || \"No Letterhead\";\n                    const customDocname = dialog.get_value(\"custom_docname\");\n                    const updatedAssignments = dialog.get_value(\"assignments\");\n                \n                    let updatedComponentData = JSON.parse(JSON.stringify(dialog.componentData));\n                    updatedComponentData.forEach((component) => {\n                      const updated = updatedAssignments.find((row) => row.component === component.name);\n                      if (updated) {\n                        component.assign = updated.email ? [updated.email] : [];\n                      }\n                    });\n                \n                    // === PDF URL generation ===\n                    const doctype = cur_frm.doc.doctype;\n                    const docname = cur_frm.doc.name;\n                    const noLetterhead = letterhead === \"No Letterhead\" ? 1 : 0;\n                \n                    const pdfUrl = `/api/method/frappe.utils.print_format.download_pdf?doctype=${doctype}&name=${docname}&format=${printFormat}&no_letterhead=${noLetterhead}&letterhead=${encodeURIComponent(letterhead)}&settings=%7B%7D&_lang=en`;\n                \n                    // === Fetch and Convert PDF to Base64 ===\n                    const fetchPdfBase64 = async (url) => {\n                      try {\n                        const response = await fetch(url);\n                        const blob = await response.blob();\n                        return new Promise((resolve, reject) => {\n                          const reader = new FileReader();\n                          reader.readAsDataURL(blob);\n                          reader.onloadend = () => resolve(reader.result.split(\",\")[1]);\n                          reader.onerror = (err) => reject(err);\n                        });\n                      } catch (err) {\n                        console.error(\"Error fetching PDF:\", err);\n                        return null;\n                      }\n                    };\n                \n                    const pdfBase64 = await fetchPdfBase64(pdfUrl);\n                \n                    if (!pdfBase64) {\n                      frappe.msgprint({\n                        title: \"Error\",\n                        message: \"Failed to fetch and convert PDF!\",\n                        indicator: \"red\",\n                      });\n                      return;\n                    }\n                    // Call new backend API\n                    frappe.call({\n                      method: \"esign_app.api.create_updated_document\",\n                      args: {\n                        custom_docname: customDocname,\n                        selectedValue: templateSelected,\n                        pdfBase64: pdfBase64,\n                        email: email,\n                        updatedComponentData: updatedComponentData,\n                      },\n                      callback: function (response) {\n                        if (response.message?.status === 200) {\n                          frappe.hide_progress();\n                          frappe.msgprint({\n                            title: \"Success\",\n                            message: \"Document Created Successfully!\",\n                            indicator: \"green\",\n                          });\n                        } else {\n                          frappe.msgprint({\n                            title: \"Error\",\n                            message: response.message?.error || \"Something went wrong!\",\n                            indicator: \"red\",\n                          });\n                        }\n                      },\n                      error: function (error) {\n                        frappe.hide_progress();\n                        frappe.msgprint({\n                          title: \"Error\",\n                          message: \"Failed to create the document!\",\n                          indicator: \"red\",\n                        });\n                        console.error(\"API Call Failed:\", error);\n                      },\n                    });\n\n                    dialog.hide();\n                  } catch (error) {\n                    console.error(\"Error in secondary action submit:\", error);\n                    frappe.msgprint(\"Error submitting data.\");\n                  }\n                },\n                \n                \n                primary_action_label: \"Save as Draft\",\n                primary_action: async (values) => {\n                  frappe.show_alert({ message: \"Processing...\", indicator: \"orange\" });\n\n                  function getPDFUrl() {\n                    let doctype = cur_frm.doc.doctype;\n                    let docname = cur_frm.doc.name;\n                    let printFormat = values.print_format || \"Standard\";\n                    let letterhead = values.letterhead || \"No Letterhead\";\n                    let noLetterhead = letterhead === \"No Letterhead\" ? 1 : 0;\n\n                    return `/api/method/frappe.utils.print_format.download_pdf?doctype=${doctype}&name=${docname}&format=${printFormat}&no_letterhead=${noLetterhead}&letterhead=${encodeURIComponent(letterhead)}&settings=%7B%7D&_lang=en`;\n                  }\n\n                  let pdfBase64 = await (async function fetchPdfBase64(url) {\n                    try {\n                      let response = await fetch(url);\n                      let blob = await response.blob();\n                      return new Promise((resolve, reject) => {\n                        let reader = new FileReader();\n                        reader.readAsDataURL(blob);\n                        reader.onloadend = () => resolve(reader.result.split(\",\")[1]);\n                        reader.onerror = (error) => reject(error);\n                      });\n                    } catch (error) {\n                      console.error(\"Error fetching PDF:\", error);\n                      return null;\n                    }\n                  })(getPDFUrl());\n\n                  if (!pdfBase64) {\n                    frappe.msgprint({\n                      title: \"Error\",\n                      message: \"Failed to fetch and convert PDF!\",\n                      indicator: \"red\",\n                    });\n                    return;\n                  }\n\n                  frappe.call({\n                    method: \"esign_app.api.fetch_and_print_data\",\n                    args: {\n                      custom_docname: values.custom_docname,\n                      selectedValue: values.template_select,\n                      pdfBase64: pdfBase64,\n                      email: email,\n                      assignments: values.assignments || [],\n                    },\n                    callback: function (response) {\n                      if (response.message?.status === 200) {\n                        frappe.hide_progress();\n                        frappe.msgprint({\n                          title: \"Success\",\n                          message: \"Document Created Successfully!\",\n                          indicator: \"green\",\n                        });\n                      } else {\n                        frappe.msgprint({\n                          title: \"Error\",\n                          message: response.message?.error || \"Something went wrong!\",\n                          indicator: \"red\",\n                        });\n                      }\n                    },\n                    error: function (error) {\n                      frappe.hide_progress();\n                      frappe.msgprint({\n                        title: \"Error\",\n                        message: \"Failed to create the document!\",\n                        indicator: \"red\",\n                      });\n                      console.error(\"API Call Failed:\", error);\n                    },\n                  });\n\n                  dialog.hide();\n                },\n              });\n\n              dialog.show();\n\n              dialog.fields_dict.template_select.df.onchange = async function () {\n                const selectedTemplate = dialog.get_value(\"template_select\");\n                if (!selectedTemplate) return;\n\n                try {\n                  let response = await frappe.call({\n                    method: \"frappe.client.get_value\",\n                    args: {\n                      doctype: \"TempleteList\",\n                      filters: { name: selectedTemplate },\n                      fieldname: \"templete_json_data\",\n                    },\n                  });\n\n                  let templateData = response.message?.templete_json_data;\n                  if (templateData) {\n                    let parsed = JSON.parse(templateData);\n                    console.log(parsed)\n                    let assignmentTable = dialog.fields_dict.assignments.grid;\n                    assignmentTable.df.data = [];\n                    parsed.forEach((item) => {\n                      assignmentTable.df.data.push({\n                        component: item.name,\n                        email: item.assign?.[0] || \"\",\n                      });\n                    });\n                    assignmentTable.refresh();\n                    dialog.componentData = parsed;\n                  }\n                } catch (error) {\n                  console.error(\"Error fetching template data:\", error);\n                }\n              };\n            };\n\n            var timeline = frm.footer.frm.timeline;\n            timeline.add_action_button(\n              __(\"Send to Esign\"),\n              send_esign,\n              \"share\",\n              \"btn-secondary send-raven-button\"\n            );\n\n            buttonAdded = true;\n          }\n        }\n      },\n    });\n  });\n});\n", "$(document).on('app_ready', function (){\n\n});\n\nimport './timeline_button';"],
  "mappings": "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",
  "names": ["_a", "_b", "user", "doctype", "docname"]
}
